#+TITLE: Emacs Configuration
#+AUTHOR: Kevin Colyar
#+EMAIL: kevin@colyar.net
#+OPTIONS: num:nil

* Repos & Core Packages
** Melpa
Melpa is the big package repo that nearly /everything/ can be found. It's a must for emacs configs.

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)
#+END_SRC

** Setup =use-package= if isn't already
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+END_SRC

* Core Setup
** Basic Stuff
*** Better Defaults
#+BEGIN_SRC emacs-lisp
  (use-package better-defaults
    :ensure t)
#+END_SRC
*** Splash Screen
Remove splash screen and use *scratch* instead as the home buffer
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t)
#+END_SRC

*** Backup Directory
Funnel all the auto backup files to one location.
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/nextcloud/emacs/backups")))
#+END_SRC

*** Line Numbers
Switch line numbers on by default in all buffers
#+BEGIN_SRC emacs-lisp
(global-linum-mode 1)
#+END_SRC

*** Menu Bar
Switch the Menubar off by default (I like to keep everything clean)
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

... but still let me easily toggle it on/off
#+BEGIN_SRC emacs-lisp
;; Toggle menubar keybind
(global-set-key (kbd "C-c m") 'menu-bar-mode)
#+END_SRC
*** Scroll Bar
Remove Scroll Bars
#+BEGIN_SRC emacs-lisp
  ;;(scroll-bar-mode -1)
#+END_SRC

*** Tool Bar
Remove Tool Bars
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC

*** New Line indent
New lines auto indents
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "RET")
  'newline-and-indent)
#+END_SRC

*** Tool Tips
Tool Tips in echo area
#+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
(setq tooltip-use-echo-area t)
#+END_SRC

*** Smooth Scrolling
Smooth Scrolling
#+BEGIN_SRC emacs-lisp
(use-package smooth-scroll
    :ensure t)
#+END_SRC
** Themes
*** Load manual install theme dir
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
#+END_SRC
*** Install Themes from Repos
List of themes to install
#+BEGIN_SRC emacs-lisp
  (use-package monokai-alt-theme
    :ensure t
    :defer t)
  (use-package gruvbox-theme
    :ensure t
    :defer t)
  (use-package darkokai-theme
    :ensure t
    :defer t)
  (use-package darktooth-theme
    :ensure t
    :defer t)
  (use-package creamsody-theme
    :ensure t
    :defer t)
  (use-package github-theme
    :ensure t
    :defer t)
  (use-package melancholy-theme
    :ensure t
    :defer t)
  (use-package darkburn-theme
    :ensure t
    :defer t)
  (use-package kaolin-themes
    :ensure t
    :defer t)
  (use-package dracula-theme
    :ensure t
    :defer t)
  (use-package darkokai-theme
    :ensure t
    :defer t)
(use-package monokai-alt-theme
    :ensure t
    :defer t)
#+END_SRC

*** Load Current default theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'monokai-alt t)
#+END_SRC
** Fonts
Set default font
#+BEGIN_SRC emacs-lisp
  (set-default-font "Monospace-10")
#+END_SRC
* Other
** Evil Mode
#+BEGIN_SRC emacs-lisp
;; Evil Mode
(use-package evil
  :ensure t
  :init
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1)
  
  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode t)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      "TAB" 'evil-window-prev
      "s s" 'swiper
      "d x w" 'delete-trailing-whitespace))
      
  ;; For gcc commenting
  (use-package evil-commentary
    :ensure t
    :bind (:map evil-normal-state-map
                ("gc" . evil-commentary)))

  (use-package evil-surround
    :ensure t
    :config (global-evil-surround-mode))

  (use-package evil-indent-textobject
    :ensure t)

  (use-package evil-org
    :ensure t
    :config
    (evil-org-set-key-theme '(textobjects insert navigation additional shift todo heading))
    (add-hook 'org-mode-hook (lambda () (evil-org-mode))))

  (use-package powerline-evil
    :ensure t
    :config
    (powerline-evil-vim-color-theme)
    )
  )
  
;; Evil everywhere
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init)
)
  
#+END_SRC
** Ivy
Setup and use Ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  ;; Ivy Keybindings
  (evil-leader/set-key
      "s l" 'ivy-resume
  )
  
  ;; Fuzzy Matching
  (setq ivy-re-builders-alist
      '((read-file-name-internal . ivy--regex-fuzzy)
        (t . ivy--regex-plus)))
)
#+END_SRC
** Swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :config
  (evil-leader/set-key
      "s s" 'swiper
  )
)
#+END_SRC
** Counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel 
  :ensure t
  :config 
  (evil-leader/set-key
      "SPC" 'counsel-M-x
      "c f" 'counsel-find-file
  )
)
#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode 1))
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC
** TODO git gutter
** ispell
** TODO System copy/paste
   #+BEGIN_SRC emacs-lisp
(use-package simpleclip
:ensure t
:config (simpleclip-mode 1)
)
   #+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package ispell
  :ensure t)
#+END_SRC
** TODO key binding
** TODO file search
** TODO ranger
* Coding
** Auto Complete
#+BEGIN_SRC emacs-lisp 
(use-package auto-complete
  :ensure t
  :config
  (ac-config-default))
#+END_SRC
** Indentation
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :ensure t
  :config
  (global-aggressive-indent-mode t))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t)
#+END_SRC
** Python/Pyenv/Linting/Nosetests
** Ruby/Rails/Rbenv/yaml/Rspec/Rubocop
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t)
#+END_SRC
** Javascript/React/Json
** Typescript
* Writing
** Org Mode
Yes. It get's it's own section. Again, I've nested everything. I might
break that up though now if I the babel stuff to generate my
configs...
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :config
    ;; Make sure org file code highlights correctly
    (setq org-src-fontify-natively t)
    (setq org-todo-keywords '(
;;(sequence "TODO" "In Progress" "|" "Waiting" "DONE" "Completed")
			      (sequence "Queue" "Working On" "On Hold" "|" "Finished" "Worked On" "Removed")))

    (evil-leader/set-key-for-mode 'org-mode
      "m i" 'org-clock-in
      "m C" 'org-toggle-checkbox
      "m o" 'org-clock-out
      "m c" 'org-clock-jump-to-current-clock
      "m d" 'org-clock-display
      "m e" 'org-set-effort
      "m p" 'org-pomodoro
      "m t" 'org-set-tags-command
      "m m" 'org-clock-modify-effort-estimate
      "m s" 'org-schedule)

    ;; ;; Org Agenda stuff
;;    (setq org-agenda-files '("~/nextcloud/emacs/org/archive/work.org"))

    (defun org-code (start end)
      "Wraps selected text with org code tags"
      (interactive "r")
      (let ((selected-text (buffer-substring (mark) (point)))
	    (db-name (read-from-minibuffer "Language[common-lisp]: ")))
	(when (eq db-name "")
	  (setf db-name "common-lisp"))
	(kill-region start end)
	(insert (format "#+BEGIN_SRC %s \n%s \n#+END_SRC" db-name selected-text))))

    (use-package org-pomodoro
      :ensure t
      :config
      ;; Persistent Clocking
      (setq org-clock-persist 'history)
      (org-clock-persistence-insinuate)

      ;; Default Table Params
      (setq org-clock-clocktable-default-properties '(:maxlevel 3 :scope subtree :tags "-Lunch"))


      ;; Org Pomodoro ;;
      ;; Setup pomodoro timer keybind
      (global-set-key (kbd "C-S-c C-S-p") 'org-pomodoro)
      (global-set-key (kbd "C-S-c C-S-e") 'org-pomodoro-extend-last-clock)

      (defun org-pomodoro-get-times ()
	(interactive)
	(message "work length: %s  short break: %s  long break: %s"
		 org-pomodoro-length
		 org-pomodoro-short-break-length
		 org-pomodoro-long-break-length))

      (defun org-pomodoro-set-pomodoro ()
	(interactive)
	(setf org-pomodoro-length 35)
	(setf org-pomodoro-short-break-length 9)
	(setf org-pomodoro-long-break-length 15))


      (org-pomodoro-set-pomodoro)

      (defun org-pomodoro-set-52-17 ()
	(interactive)
	(setf org-pomodoro-length 52)
	(setf org-pomodoro-short-break-length 17)
	(setf org-pomodoro-long-break-length 17)))
    )

#+END_SRC
* Links
http://ryan.himmelwright.net/post/emacs-update-evil-usepackage/
http://ryan.himmelwright.net/post/org-babel-setup/
https://sam217pa.github.io/2016/08/30/how-to-make-your-own-spacemacs/
https://github.com/akirabaruah/emacs-config
